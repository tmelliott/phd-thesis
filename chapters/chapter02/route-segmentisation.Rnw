<<echo=FALSE>>=
knit_theme$set("earendel")
@

\section{Constructing a network from GTFS data}
\label{sec:route-segments}

In \cref{sec:literature}, I reported how arrival time prediction is greatly improved when data from multiple routes is combined to estimate traffic conditions \citep{Yu_2011}. However, many of these applications were specific to a certain set of routes, or used external information (such as automatic toll readers and taxis) to get \rt{} traffic information. We wanted to develop a \emph{simpler}, \emph{more generalised} approach using solely \GTFS{} data (stops and shapes) to construct a network of non-overlapping\footnote{Except of course reverse directions.} road segments. The network should consist of \emph{nodes} (which could be intersections or bus stops) connected by \emph{edges}, or road segments, which is similar to the structure used by \citet{Celan_2017,Vuurstaek_2018}.


The main goal of the network is to detect where any two routes overlap, even partially. There are several possible approaches to this, but the simplest is to look at common subsequences of bus stops. Of course, stops do not make optimal node locations because routes do not diverge \emph{physically} at stops---that would require locating \emph{intersections}. However, due to difficulties in finding intersections from either the \gls{gtfs} data or outside information, we opted to use bus stops for this work. \Cref{fig:gtfs_route_network} shows a simple route diagram with several overlapping routes. We see that each link between stops is common across routes, but routes that merge at intersections do not merge in the network until they reach a common stop.


<<gtfs_route_network,echo=FALSE,message=FALSE,fig.width=8*.6,fig.height=3.5,out.width="0.6\\textwidth",fig.align="center",fig.cap="A simplified transit network with road segments (edges) connecting stops (nodes). Top: three routes with common subsequences of stops. Bottom: the widths of road segments represents the number of routes using them. There remains some segment overlap since routes merge at stops, not intersections.">>=
library(tidyverse)

stops <- tibble(
  x = c(0, 0, 1, 1, 1.2, 2, 2, 3, 4, 5, 5, 6, 6),
  y = c(2, 1, 2, 1, 0.3, 1.5, 0.8, 1.5, 1.5, 2, 1, 2, 1)
)

roads <- tibble(
  id = c(1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8,
        9, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13,
        14, 14, 15, 15, 16, 16, 16, 17, 17),
  x = c(0, 1, 0, 1, 1, 1.2, 2, 1, 1.2, 2, 2, 3, 1.2, 2, 2, 2.5, 3,
        3, 4, 4, 4.3, 5, 4, 4.3, 5, 5, 6, 5, 6, 2, 3, 3, 4, 3, 4, 4, 4.295, 5,
        5, 6),
  y = c(2, 2, 1, 1, 2, 1.53, 1.53, 1, 1.5, 1.5, 1.5, 1.5, 0.3, 0.8, 0.8, 1.47, 1.47,
        1.5, 1.5, 1.53, 1.53, 2, 1.5, 1.5, 1, 2, 2, 1, 1, 1.53, 1.53,
        1.53, 1.53, 1.47, 1.47, 1.47, 1.47, 0.97, 0.97, 0.97)) %>%
  mutate(
    lty = ifelse(id %in% c(6, 7, 15, 16, 17),
      2,
      ifelse(id %in% c(1, 3, 13, 14, 9, 11), 3, 1)
    )
  )

p1 <- ggplot() +
    geom_point(aes(x, y), data = stops, size = 3, pch = 19) +
    geom_path(
      aes(x, y, group = id, colour = as.factor(lty)),
      lwd = 1,
      data = roads
    ) +
    theme_void() + theme(legend.position = 'none') +
    coord_fixed(1)

roads2 <- roads %>% filter(!id %in% c(5, 14, 15, 16, 17)) %>%
    group_by(id) %>% do({
        if ((.)$id[1] == 12) {
            (.) %>% mutate(y = 1)
        } else if ((.)$id[1] %in% c(13, 8)) {
            (.) %>% mutate(y = 1.51)
        } else if ((.)$id[1] %in% c(10)) {
            (.) %>% mutate(y = y - 0.01)
        } else {
            (.)
        }
    }) %>%
    mutate(lwd = ifelse(id %in% c(13, 10, 12), 2,
                        ifelse(id %in% c(8), 5, 1)))
p2 <- ggplot() +
    geom_point(aes(x, y), data = stops, size = 3, pch = 19) +
    geom_path(aes(x, y, group = id, size = lwd), data = roads2) +
    theme_void() + theme(legend.position = 'none') +
    scale_size_continuous(range = c(0.5, 2.5)) +
    coord_fixed(1)

library(patchwork)

p1 / p2

@


<<gtfs_route_id,echo=FALSE,message=FALSE>>=
source("load_gtfs.R")
con <- dbConnect(SQLite(), "at_gtfs.sqlite")
rid <- dbGetQuery(con, "SELECT route_id FROM routes WHERE route_short_name='27W' LIMIT 1")$route_id
dbDisconnect(con)
@


One other issue with \AT{}'s \GTFS{} data is that all object IDs are \emph{versioned}. That is, instead of a route having an ID of \verb+\Sexpr{gsub("-.+", "", rid)}+, the date and version number are appended to it: \verb+\Sexpr{rid}+. This is the same for the IDs of trips, shapes, and stops, making it challenging to transfer existing segments based on stops from previous versions of the \gls{api} and requiring an additional step to remove the version information from the raw data.


The algorithm we implemented uses only bus stops but can extend to intersections, if available. Each stop along a route is assessed to see if any nodes already exist in that location to avoid the versioning issue mentioned above. If so, the route is assigned the existing node; otherwise, a new node is created and assigned instead. Road segments are defined by unique one-way connections between two stops: there can only be one segment going from node $A$ to node $B$ (the reverse is considered a different segment). The network is constructed within \pkg{transitr}:
<<transitr_construct_network,cache=TRUE,size="small">>=
library(transitr)
nw <- load_gtfs("at_gtfs.sqlite") %>% construct()
transitr:::load_road_segments(nw) %>% head()
@
