<<echo=FALSE>>=
knit_theme$set("earendel")
@

\section{\Rt{} implementation in \pkg{Rcpp}}
\label{sec:rt-implementation}

In \cref{sec:gtfs}, I introduced the \Rstats{} package \pkg{transitr}, which loads a \GTFS{} database and connects to a real-time \gls{api}. The advantage of \Rstats{} \citep{rcore} is its superior ability for processing data of various forms through additional packages, and providing an easy-to-use interface for users. However, when it comes to computational efficiency, \Cpp{} is the better choice. Fortunately, \Rstats{} offers an interface to \Cpp{} through the \pkg{Rcpp} package developed by \citet{Rcpp}. This gives us the speed and memory management capabilities of \Cpp{} from within \Rstats{}.

The general structure of our program has two parts. The first handles data collection from a transit provider and creation of the transit network (\cref{sec:route-segments}), all stored in an \prog{SQLite} database.\footnote{\url{https://www.sqlite.org/index.html}} Users can connect to a GTFS-realtime \gls{api}, as well as pass additional arguments to the generated \obj{gtfs} object, which are then forwarded onto the second part which runs purely within \Cpp{}.

Within the \Cpp{} component, there are two main phases: set-up and modelling. During the set-up phase, the GTFS database is loaded and parameter values are established. A vector of \class{Vehicle} objects is initialised to contain the real-time vehicle states. The modelling phase consists of a single \verb+while+ loop which runs until the operating system sends the program a kill signal. It is inside this loop that all of the real-time modelling discussed throughout the remainder of this thesis occurs.

Within the program, we use \gls{oop} to represent objects---both static (routes and trips) and \rt{} (vehicles, road segments). These objects contain a lot of \emph{interdependence}; for example, a trip belongs to a route and vehicles services trips. Pointers are used in \Cpp{} to allow easy access to these relationships without any duplication of information. For example, the route number for a vehicle can be obtained as follows:
<<pointer_ex,engine="c",eval=FALSE>>=
vehicle.trip ()->route ()->route_short_name ();
@
As pointers are not fixed, the above example works even after the vehicle changes to another trip. In addition to retrieving information, pointers can be used to pass information between objects. Later in this thesis, vehicles are used to estimate traffic conditions along individual roads, and then forward these observations on to the appropriate road segment. First, note that a route follows a sequence of road segments, which are stored in \Cpp{} using a \verb+std::vector+ containing an ordered sequence of \class{RouteSegment} objects, each pointing to the appropriate \class{Segment}. Thus, once a vehicle completes travel along the segment with index \verb+si+, the observed average speed can be passed directly to the \class{Segment}:
<<pointer_ex2,engine="c",eval=FALSE>>=
vehicle.trip ()->route ()
    ->segments ().at (si)->segment ()
    ->push_data (speed, uncertainty);
@
\noindent
This data is then handled by the \class{Segment} object (described later in \cref{cha:network_model}).

The main issue with pointers is that, if an object is deleted or moved, a pointer may no longer point to the appropriate object, resulting in a \emph{segmentation fault} and crashing the program at runtime. However, with care, and by checking a pointer is valid before using it, it is possible to avoid such problems. For example, the above would be better written as follows:
<<pointer_ex3,engine="c",eval=FALSE>>=
Trip* trip = vehicle.trip ();
if (trip == nullptr) return();
Route* route = trip->route ();
if (route == nullptr) return();
if (route->segments.size () <= index) return ();
Segment* segment = route->segments.at (index)->segment ();
if (segment == nullptr) return ();
segment->push_data (speed, uncertainty);
@

The last topic for this section is \emph{multithreading}, which is the process of using more than one CPU core to run the program with the assistance of \prog{OpenMP} \citep{OMP}. This requires that the program is \emph{threadsafe}, such that two independent cores will not adversely interact (for example by both trying to modify the same object). The simplest way around this is to perform read-only operations on common resources.

Sometimes, however, write operations are unavoidable, such as when passing data to road segments. \emph{Mutex locking} provides a simple way of ensuring that only one process can perform a specified task at a time. Continuing with the same example, if two vehicles traverse a road at the same time (which happens frequently), they will both want to push their observed speed observations to this same \class{Segment} object at the same time. To prevent errors, we create a lock at the beginning of the \verb+Segment::push_data ()+ method. Now when the first \class{Vehicle} calls \verb+push_data ()+, the \class{Segment} is ``locked'' until the method is complete (the data is processed and stored). If a second \class{Vehicle} calls the method before the first has finished, it will find the \class{Segment} locked and the process will wait until the lock has been released before it can continue. This lets us parallelise the processing of vehicles to multiple cores, greatly speeding up iteration timings.
