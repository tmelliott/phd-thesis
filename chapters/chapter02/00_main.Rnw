\chapter{\Rt{} transit data}
\label{cha:data}

<<gtfs_info,echo=FALSE,message=FALSE>>=
source("load_gtfs.R")
updated_at <- as.POSIXct("2019-08-12 12:00:00", tz = "GMT")
updated_fmt <- format(updated_at, "%d %B %Y")

# fetch some info about the data
con <- dbConnect(SQLite(), db)
vmax <- dbGetQuery(con, "select max(version) as v from routes")$v
nroute <- dbGetQuery(con, sprintf("select count(*) as n from routes where version=%s", vmax))$n
ntrip <- dbGetQuery(con, sprintf("select count(*) as n from trips where version=%s", vmax))$n
ntrip.week <- dbGetQuery(con, sprintf("select count(*) as n from calendar where friday=1 and version=%s", vmax))$n
dbDisconnect(con)

# fetch stuff from TransitFeeds
nfeed <- 1234
nlocation <- 672
transitfeeds_date <- "12 Feb 2020"
@

\AT{} operates a fleet of vehicles---including buses, trains, and ferries---to transport passengers around Auckland, New Zealand's most populous urban region \citep{StatsNZ_2019}, from Wellsford in the north to Pukekohe in the south. Serving the region are \Sexpr{nroute}~routes\footnote{As of \Sexpr{updated_fmt}, sourced from \url{https://at.govt.nz/}.}, each providing a service from an \emph{origin} to a \emph{destination} via a specified sequence of \emph{stops} at which passengers may board or alight.


For each route, one or more \emph{trips} are scheduled to operate, typically departing from the origin stop at a fixed time, with approximate arrival times for the intermediate stops along the way. In some cases, services wait at specific stops until the scheduled departure time, known as a \emph{layover}; in others, drivers may adjust their speed to adhere to the schedule. In most cases, however, drivers heed no attention to the schedule and simply drive along the route at whatever speed is reasonable\footnote{This is at least what I have observed over 10~years of catching public transport.}. Not all trips run every day; typically trips are scheduled as weekday, Saturday, or Sunday and public holidays. Altogther there are (at the time of writing) \Sexpr{format(ntrip, big.mark = ",")}~trips provided by \AT{}, \Sexpr{format(ntrip.week, big.mark = ",")} of which run every weekday.


The assignment of routes, trips, and stops is a common occurence in transport systems, to the extent that it was formalised by Google's \emph{\acrfull{gtfs}} \citep {GoogleDevelopers_2006}. \GTFS{} provides a detailed specification of how transit data should be organised, making it significantly easier for external systems to access, with the primary example being Google Maps, although plenty of other applications exist that make use of it\footnote{Including the one we are presenting.}. \GTFS{} has now been adopted by \Sexpr{format(nfeed, big.mark = ",")}~providers across \Sexpr{format(nlocation, big.mark = ",")}~locations globally, which are shown in \cref{fig:gtfs_feeds}. \GTFS{} is discussed further in \cref{sec:gtfs}.

\begin{figure}
\centering
\includegraphics[width=0.8\textwidth]{figure/gtfs_feeds.png}
\caption[Locations of GTFS feed providers]{Locations of the \Sexpr{nlocation}~\GTFS{} feed providers,\\
sourced from \url{http://transitfeeds.com/} on \Sexpr{transitfeeds_date}.}
\label{fig:gtfs_feeds}
\end{figure}


The vehicles servicing the trips are observed as they travel along the route, either as intermittent \GPS{} locations (\emph{vehicle positions}), or on arrival at or departure from bus stops along the way (\emph{trip updates}). How this data is structured is also specified by \GTFS, and will be described in detail in \cref{sec:realtime-data}, along with a discussion of the issues we encoutered using the \AT{} data.


One of the main ideas we discussed in \cref{sec:literature} was the importance of combining data from multiple routes when predicting arrival times. As it stands, there is no direct method for determining if two routes overlap---that is, share a common path---from \GTFS{} data. The simplest approach would be to compare subsequences of stops, with routes servicing the same stops most likely following the same path between them, although there are several situations where this is not the case. We formalise this idea, as well as expand on it, in \cref{sec:route-segments}.


The \rt{} nature of the application demands predictions be made as soon after observing the data as possible. For this reason, \glspl{rbm} are a logical choice for estimating states in \rt{}, and as such has been used extensively (refer back to \cref{sec:literature}). This family of models are commonly used in vehicle tracking applications, allowing the vehicle's state (such as speed) to be estimated from a \rt{} sequence of noisy measurements of its location. The final section of this chapter provides an introduction to the \glspl{rbm} used throughout the remainder of this thesis.


\input{DIRNAME/gtfs.tex}
\input{DIRNAME/realtime_data.tex}
\input{DIRNAME/route-segmentisation.tex}
\input{DIRNAME/recursive_bayes.tex}

\input{DIRNAME/realtime-implementation.tex}
