\chapter{Working with \rt{} transit data}
\label{cha:data}

\textcolor{red}{
    \begin{itemize}
        \item the basic nature of \rt{} transit data:
            it is \emph{\rt{}}!
        \item vehicles are fitted with \gls{avl} technology,
            for example a \gls{gps} device,
            which allows the transit provider (Auckland Transport)
            to track the location of each vehicle in the network
            as they scurry around like ants
        \item however, in this day and age, it has become increasingly common
            for this type of data to be made publically available
        \item this allows independent developers to create mobile apps
            that commuters can use to check bus times
            \begin{itemize}
                \item some examples from places like Seattle? or where
                    they \emph{DON'T} use GTFS
                \item and some NZ examples that do use GTFS:
                    AT Mobile, KiwiHub, waka.com, etc.
            \end{itemize}
        \item typically, the type of data is the same: routes,
            instances of routes (trips), stops, paths (shapes),
            and of course \rt{} data!
        \item Google released a \emph{specification} of how this should be organised,
            called it \gls{gtfs}: specifies definitions of things,
            and the fields (what information about each thing)
            that are required, or optional
        \item Also a \rt{} version of \gls{gtfs},
            detailing how vehicle positions or trip arrival/departure observations
            should be described in a public \gls{api}
        \item one thing lacking from gtfs is spatial relationships
            \begin{itemize}
                \item two routes may overlap or not, and there's no direct
                    way of knowing
                \item it would be incredibly useful if any shared section(s)
                    of routes was known, and could be modelled as such
                \item thus instead of relying only on other buses travelling
                    along the same route to tell us about things,
                    we could also use buses of other routes
                    that happen to travel along the same \emph{road}
            \end{itemize}
        \item then there's how we actually model \rt{} data?!
            usually we fit complex models and these take time to estimate/fit
        \item in \rt{} context, however, we observe each data point sequentially,
            and it seems a waste to re-fit all of the previous observations
            (we don't actually care about them anymore, tbh): this type of
            \rt{} tracking often uses \emph{recursive Bayesian filters}
    \end{itemize}
}


The concept at the core of this work is that
everything is happening in \rt{}.
Observations of vehicles are behind recorded and distributed online,
the prediction program is processing them,
fitting a model,
and generating arrival time estimates which are themselves being distributed,
until they are finally delivered to users' mobile devices.
All in \rt{}.
And repeated approximately every 30~seconds (or sooner, if possible).


In this section,
we will examine the existing infrastructure providing each of these steps.
First is the data,
which comprises of two parts:
the pre-specified, \emph{static} component (\cref{sec:gtfs})
and the \rt{} component (\cref{sec:realtime-data}).
One thing missing, however, is spatial information.
I don't know how to meld this into the flow of the chapter.
Perhaps instead of focus on \rt{},
it can be \emph{data} focus - static -> realtime -> network.
The network is the novel bit.
It's how we do the realtime network bit.
Which is key to our approach.

The concept: network data for congestion.


\input{DIRNAME/gtfs.tex}
\input{DIRNAME/realtime_data.tex}
\input{DIRNAME/route-segmentisation.tex}
\input{DIRNAME/recursive_bayes.tex}
