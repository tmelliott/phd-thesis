\section{Estimating road speeds}
\label{sec:vehicle_speeds}

Now that we have estimated the necessary vehicle states and their respective trajectories, we are able to infer a vehicle's \emph{average speed} along the $\ell^\text{th}$ road segment, $\Vtt_{\ell}$. These estimates are used later to update the \emph{road network state} (\cref{cha:network_model}) and ultimately estimate arrival times (\cref{cha:prediction}).


Estimation of average road speed is perfomed by first computing the \emph{travel time} along each road segment as the bus traverses the network. To do so, we record the time when the vehicle starts and ends each segment, $\Vsegstart_\ell$ and $\Vsegend_\ell$, respectively, and simply take the difference to obtain the travel time in seconds. By using a particle filter, we simply record these values for each particle as it is transitioned to each new state. Finally, transforming to average speed uses the length of the segment, $\Tseglen_\ell$, in meters, and the standard speed formula (speed = distance / time):
\begin{equation}
\label{eq:vehicle_avg_speed}
\Vtt_\ell = \frac{\Tseglen_\ell}{\Vsegend_\ell - \Vsegstart_\ell}.
\end{equation}


Since estimating \cref{eq:vehicle_avg_speed} is straighforward for each individual particle, the posterior distribution of the vehicle's average travel time along segment $\ell$, given all observations up to and including time $\Vtime_k$, is again approximated using the Dirac measure,
\begin{equation}
\label{eq:pf_speed_dist}
p(\Vtt_\ell | \Vobs_{1:k}) \approx
\sum_{i=1}^\Np \Pwt_k \dirac(\Vtt_\ell - \Vtt\vi_\ell).
\end{equation}
In situations where only some of the particles have completed travel along a segment, we wait until the next iteration to re-check that all particles have completed it and, since start and end times are stored for each individual particle, we can still estimate average speed.



In order to explore the accuracy of the models presented in \cref{sec:vehicle_model}, a simple vehicle simulation was performed with known road speeds. Three simulations are examined, starting without nodes, and then incrementally adding bus stops and then intersections. For each, we used three different sampling methods:
\begin{itemize}
\item uniform sampling with 10~second intervals;
\item uniform sampling with 30~second intervals; and
\item non-uniform sampling at nodes.
\end{itemize}
As mentioned in \cref{sec:vp_data}, the last of these is, in fact, a common feature of the Auckland Transport data; we discuss the complications further in \cref{sec:pf_implementation}. In each simulation, we implemented the three variations of the transition function: $\Vtrans_{A1}$, $\Vtrans_{A2}$, and $\Vtrans_{A3}$.



The posterior mean travel time was used
to examine the estimation accuracy of the models and compare them,
which is simple to calculate from the particle filter estimates of travel time by
the weighted mean of the sample,
\begin{equation}
\label{eq:pf_travel_time_mean}
\bar\Vtt_\ell =
\E{\Vtt_\ell | \Vobs_{1:k}} =
\sum_{i=1}^\Np \Pwt_k \Vtt\vi_\ell
\end{equation}



\subsubsection{Simulation A: general vehicle model}
\label{sec:vehicle_sim_A}


<<sim1_gen,echo=FALSE,message=FALSE,cache=FALSE>>=
source("scripts/sims.R")
s1 <- simulate_vehicle()
segs <- lapply(1:nrow(s1$segments),
    function(i) s1$segments$distance[i] + c(0, s1$segments$length[i])
)
tt <- s1$segments$tt
fcap1 <- 'Simulated vehicle trajectory, with five road segments.'
fscap1 <- c(
    "The simulated data.",
    "10~s sampling.",
    "30~s sampling.",
    "Observations at bus stops and intersections."
)
simnames <- c("Uniform (10s)", "Uniform (30s)", "Waypoints")
@


The simulated data, shown in \cref{fig:sim1_graph1}, uses the transition model described by $\Vtrans_{A1}$ to simulate a vehicle trajectory, and uses several time point sampling methods: uniform sampling with high (\cref{fig:sim1_graph2}) and low (\cref{fig:sim1_graph3}) frequency, and non-uniform sampling (\cref{fig:sim1_graph4}), which is more in line with how the Auckland Transport data is collected.


The goal of the simulation is to estimate the average vehicle speeds along several road segments, as well as the associated uncertainty. The simulation was performed in R \citep{rcore} using $\Np = 2000$ particles per vehicle, and so the implementation is slightly different from the C++ one defined in \cref{sec:pf_implementation}.

<<sim1_graph,echo=FALSE,fig.height=2,fig.width=4,out.width=".49\\linewidth",fig.cap=fcap1,fig.subcap=fscap1,fig.ncol=2>>=
p1 <- ggplot(s1$path, aes(time, distance)) +
    geom_hline(yintercept = s1$segments$distance[-1],
        lty = 2, colour = "gray") +
    theme_classic() +
    theme(panel.grid = element_blank()) +
    xlab('Time (s)') + ylab('Distance (m)') +
    ylim(0, max(s1$path$distance)) + xlim(0, max(s1$path$time))

p1 + geom_path()
p1 + geom_point(aes(t, x), data = s1$observations$high)
p1 + geom_point(aes(t, x), data = s1$observations$low)
p1 + geom_point(aes(t, x), data = s1$observations$waypoints)
@

<<sim1_pf,echo=FALSE,message=FALSE,warning=FALSE,fig.height=3,fig.width=8,out.width="\\linewidth",fig.cap="Simulation results for the three models (rows) applied to the data from three sampling methods (columns), using $\\Np=2000$ particles. The standard deviation of the particle travel times is represented as error bars, though in many cases the error is too small to display.">>=
S0 <- get_sim_1()
S0 %>%
    left_join(
        s1$segments %>%
            mutate(
                segment = paste("Segment", id),
                true_speed = length / tt
            ) %>%
            select(segment, length, true_speed)
    ) %>%
    mutate(
        truth = true_speed,
        speed = length / travel_time
    ) %>%
    group_by(model, segment, sim) %>%
    summarize(
        mean_speed = mean(speed),
        median_speed = median(speed),
        truth = first(truth),
        var_speed = var(speed),
        se_speed = sqrt(var_speed / length(travel_time)),
        speed_lower = quantile(speed, 0.25),
        speed_upper = quantile(speed, 0.75),
        length = first(length)
    ) %>%
    ungroup() %>%
    mutate(
        xpos = as.numeric(as.factor(model)) +
            as.numeric(as.factor(segment)) / 15
    ) %>%
    ggplot(aes(xpos, mean_speed - truth, colour = segment)) +
    geom_pointrange(
        aes(
            ymin = mean_speed - truth - sqrt(var_speed),
            ymax = mean_speed - truth + sqrt(var_speed)
        ),
        shape = 19, size = 0.5
    ) +
    facet_grid( ~ sim,  scales = "free_y") +
    theme_classic() +
    theme(strip.background = element_blank()) +
    geom_hline(yintercept = 0, col = "gray", lty = 2) +
    ylab("Estimate - actual (m/s)") +
    scale_x_continuous(
        "Model",
        limits = c(0.5, 4.0),
        breaks = 1:3,
        labels = paste0("A", 1:3)
    ) +
    labs(colour = "")
@

<<sim1_pf_full,echo=FALSE,message=FALSE,warning=FALSE,fig.width=8,fig.height=8,fig.cap="Speed estimation results for 100 simulations. In each the vehicle trajectory is simulated using a different seed, and the speed estimate is taken as the mean of the particle speeds along each segment.">>=
# do the whole thing over and over again
n <- 240
Nparticle <- 2000
simnames <- c("Uniform (10s)", "Uniform (30s)", "Waypoints")

s00 <- pbapply::pblapply(1:100,
    function(seed) {
        if (!dir.exists("sims")) dir.create("sims")
        # message(sprintf("\n* Now running simulation %d ...", seed))
        x <- NULL
        set.seed(seed)
        while(is.null(x))
            x <- doSim(Nparticle, simnames, seed = sample(1e9, 1), fn = seed)
        x
    }
) %>%
    bind_rows() %>%
    ungroup() %>%
    left_join(
        s1$segments %>%
            mutate(
                segment = paste("Segment", id)
            ) %>%
            select(segment, length)
    ) %>%
    mutate(
        truth = length / truth,
        estimate = length / estimate
    )

s00 %>% ggplot(aes(truth, truth - estimate, fill = segment, colour = segment)) +
    geom_hline(yintercept = 0, colour = "gray") +
    geom_point() +
    facet_grid(sim ~ model) +
    theme_classic() +
    theme(strip.background = element_blank()) +
    xlab("Actual speed (m/s)") +
    ylab("Estimate - Actual (m/s)") +
    labs(colour = "", fill = "")
@

The results of the simulation applied to the data displayed in \cref{fig:sim1_graph} is shown in \cref{fig:sim1_pf}. Under the high-frequency uniform sampling method, all models perform similarly with high precision (the errors are all close to zero) and accuracy (the uncertainty is small enough that it does not show up). For the low-frequency sampling, however, models A1 and A2 perform similarly, while model A3 shows difficulty estimating the true speed; however, it seems to estimate the \emph{uncertainty} of its estimates quite well, as indicated by the large error bars. Finally, the waypoints model again has similar performance for each model, with A1 demonstrating the best performance.

To further examine the compariative performance of the models, we repeated the simulation 100~times using the same segments and sampling points, but varying the underlying trajectory of the vehicle. These results, displayed in \cref{fig:sim1_pf_full}, reiterate our previous observations: the uniform, high-frequency sampling case is easy to estimate, though model A2 shows a little more variation than the others. However, in the low-frequency uniform and waypoint sampling methods, A1 and A2 perform equally, while A3 shows large errors, particularly on faster segments.



\subsubsection{Simulation B: bus stop model}
\label{sec:vehicle_sim_B}


<<sim2_gen,echo=FALSE,message=FALSE>>=
s2 <- simulate_vehicle(pi = 1, seed = 1000)
segs <- lapply(1:nrow(s2$segments),
    function(i) s2$segments$distance[i] + c(0, s2$segments$length[i])
)
tt <- s2$segments %>% rowwise() %>%
    mutate(
        tt = tt -
            sum(s2$stops$d[between(s2$stops$distance,
                distance, distance + length
            )])
    ) %>% pluck("tt")
fcap2 <- 'Simulated vehicle trajectory, with five road segments and three intermediate stops.'
fscap2 <- c(
    "The simulated data.",
    "10~s sampling.",
    "30~s sampling.",
    "Observations at bus stops and intersections."
)
@



<<sim2_graph,echo=FALSE,fig.height=2,fig.width=4,out.width=".49\\linewidth",fig.cap=fcap2,fig.subcap=fscap2,fig.ncol=2>>=
p2 <- ggplot(s2$path, aes(time, distance)) +
    geom_hline(yintercept = s2$segments$distance[-1],
        lty = 2, colour = "gray") +
    geom_hline(yintercept = s2$stops$distance[-1],
        lty = 3, colour = "orangered") +
    theme_minimal() +
    theme(panel.grid = element_blank()) +
    xlab('Time (s)') + ylab('Distance (m)') +
    ylim(0, max(s2$path$distance)) + xlim(0, max(s2$path$time))

p2 + geom_path()
p2 + geom_point(aes(t, x), data = s2$observations$high)
p2 + geom_point(aes(t, x), data = s2$observations$low)
p2 + geom_point(aes(t, x), data = s2$observations$waypoints)
@

And now we simulate some data with stopping at bus stops. \Cref{fig:sim2_graph} shows a similar trajectory as before, but instead the vehicle stops at bus stops along the route (denoted with a dotted red line). The sampling is the same as before: 10~second and 30~second rates, as well as observations at waypoints (intersections and bus stops).


<<sim2_pf,echo=FALSE,message=FALSE,warning=FALSE,fig.height=3,fig.width=8,out.width="\\linewidth",fig.cap="Simulation results for the three models (rows) applied to the data from three sampling methods (columns), using $\\Np=2000$ particles. [details].">>=
S0 <- get_sim_2()

S0 %>%
    left_join(
        s2$segments %>%
            mutate(
                segment = paste("Segment", id),
                true_speed = length / tt
            ) %>%
            select(segment, length, true_speed)
    ) %>%
    mutate(
        truth = true_speed,
        speed = length / travel_time
    ) %>%
    group_by(model, segment, sim) %>%
    summarize(
        mean_speed = mean(speed),
        median_speed = median(speed),
        truth = first(truth),
        var_speed = var(speed),
        se_speed = sqrt(var_speed / length(travel_time)),
        speed_lower = quantile(speed, 0.25),
        speed_upper = quantile(speed, 0.75),
        length = first(length)
    ) %>%
    ungroup() %>%
    mutate(
        xpos = as.numeric(as.factor(model)) +
            as.numeric(as.factor(segment)) / 15
    ) %>%
    ggplot(aes(xpos, mean_speed - truth, colour = segment)) +
    geom_pointrange(
        aes(
            ymin = mean_speed - truth - sqrt(var_speed),
            ymax = mean_speed - truth + sqrt(var_speed)
        ),
        shape = 19, size = 0.5
    ) +
    facet_grid( ~ sim,  scales = "free_y") +
    theme_classic() +
    theme(strip.background = element_blank()) +
    geom_hline(yintercept = 0, col = "gray", lty = 2) +
    ylab("Estimate - actual (m/s)") +
    scale_x_continuous(
        "Model",
        limits = c(0.5, 4.0),
        breaks = 1:3,
        labels = paste0("A", 1:3)
    ) +
    labs(colour = "")

@


<<sim2_pf_full,echo=FALSE,message=FALSE,warning=FALSE,fig.width=8,fig.height=8,fig.cap="Speed estimation results for 100 simulations. In each the vehicle trajectory is simulated using a different seed, and the speed estimate is taken as the mean of the particle speeds along each segment.">>=
# do the whole thing over and over again
n <- 240
Nparticle <- 2000
simnames <- c("Uniform (10s)", "Uniform (30s)", "Waypoints")

s00 <- pbapply::pblapply(1:50,
    function(seed) {
        if (!dir.exists("sims")) dir.create("sims")
        # message(sprintf("\n* Now running simulation %d ...", seed))
        x <- NULL
        set.seed(seed)
        while(is.null(x))
            x <- doSim2(Nparticle, simnames, seed = sample(1e9, 1), fn = seed)
        x
    }
) %>%
    bind_rows() %>%
    ungroup() %>%
    left_join(
        s1$segments %>%
            mutate(
                segment = paste("Segment", id)
            ) %>%
            select(segment, length)
    ) %>%
    mutate(
        truth = length / truth,
        estimate = length / estimate
    )

s00 %>% ggplot(aes(truth, truth - estimate, fill = segment, colour = segment)) +
    geom_hline(yintercept = 0, colour = "gray") +
    geom_point() +
    facet_grid(sim ~ model) +
    theme_classic() +
    theme(strip.background = element_blank()) +
    xlab("Actual speed (m/s)") +
    ylab("Estimate - Actual (m/s)") +
    labs(colour = "", fill = "")

@


The results, shown in \cref{fig:sim2_pf}, show less accuracy in travel time estimation. The uniform sampling observations give the best results as expected, while the other two result in a lot of uncertainty.

Comparing the models, we see that model A1 is generally the worst, except in segments 1--2 which contain no bus stops. The changes in vehicle speed at bus stops cannot be captured by A1, whereas, particularly in the 10~s simulation, models A2 and A3 can. However, in segments 3--5 with bus stops, we begin to see a lot of uncertainty in the travel time.



\textcolor{red}{
    \begin{itemize}
        \item known obstacles are OK - but difficult to account for unknown ones
        \item TT estimates poorer at higher noise, but obstacles don't break the PF as much
        \item low noise = poor sample of trajectors (-> requires more particles)
        \item trade off between performance/precision/Nparticles
    \end{itemize}
}



\subsubsection{Simulation C: intersections model}
\label{sec:vehicle_sim_C}

\textcolor{red}{
    \begin{itemize}
        \item create simulation and test performance with known intersection locations
        \item not yet applicable to actual model as intersection detection not yet implemented
    \end{itemize}
}
