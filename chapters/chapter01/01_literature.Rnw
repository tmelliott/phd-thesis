
\section{On the evolution of bus prediction}
\label{sec:literature}


Over the last two decades,
there has been an enormous advance in both the technologies available and the models used
to track buses in real-time and simultaneously make arrival-time predictions for the upcoming stops.
Of particular interest are the recursive Bayesian filters,
namely the Kalman Filter, which has been used in transit models since the late 1990's,
and the particle filter, which has only recently shown up in the transit literature,
but has several unique characteristics we wish to exploit in our work.
In addition to these models,
there has also been a lot of progress in the field using data-oriented and machine learning models
such as \gls{knn}, \gls{ann}, and \gls{svm}.
We will briefly describe these,
focusing on the transit-specific features that were incorporated into them.



\subsubsection{Kalman Filter}
\label{sec:kalman-filter}

Given the real-time nature of the data, and the necessity for computations to be efficient,
recursive Bayesian filters are an obvious choice of model.
One popular filter that has been used in tracking and navigation,
as well as several bus-prediction applications,
is the \kf{} \citep{Wall99analgorithm,Dailey_2001,Shalaby_2004}.
As in all Bayesian recursive filters,
it assumes that there is an underlying, unmeasurable \emph{Markov process}
which has a state at time $k$ denoted $\bX_k$,
and an observable, dependent state for which we can obtain measurements $\bY_k$
\citep{Jazwinski_1970}.
A \emph{measurement matrix}, $\mat{H}$,
or more generally a measurement function $h$,
describes the relationship between $\bX$ and $\bY$.


Modeling real-time data with any recursive Bayesian filter involves two steps:
\emph{predict} and \emph{update}.
In the predict step of the \kf{},
the Markov process is modeled using a \emph{transition matrix} $\mat{A}$
and Gaussian \emph{process noise} $\mat{w}_k \sim \mathcal{N}(0, \mat{G})$,
where $\mat{G}$ is a covariance matrix describing system noise.
The state is predicted using the model
\begin{equation}
  \label{eq:brf-predict}
  \hat\bX_k = \mat{A}_k \bX_{k-1} + \mat{w}_k.
\end{equation}
Next, in the update step, the state estimate is modeled using the equation
\begin{equation}
  \label{eq:brf-update}
  \bY_k = h(\bX_k) + \mat{e}_k,
\end{equation}
where $\mat{e}_k \sim \mathcal{N}(0, \mat{R})$,
and $\mat{R}$ is the covariance matrix describing measurement error.
The \kf{} algorithm generates a state estimate and associated covariance matrix
that is a trade-off between system noise and measurement error.
Since it uses only matrix operations,
it is a computationally efficient algorithm,
and is therefore suited to modeling data in real-time.


\cite{Dailey_2001} formulated a \kf{} model using \gls{avl} data obtained by signposts and odometers,
which provided observations of \emph{distance traveled}, $\bar d_k$, and time.
To avoid confusion, we use $\mat{Z}$ for observations of \emph{distance},
that is $\mat{Z}_k = \left[ \bar d_k\ t_k \right]^T$;
$\bY$ will represent measurements from a \gls{gps} that we encounter later.
The true state was composed of distance into trip, speed, and the travel time
remaining to reach a given stop,
$\bX_k = \left[ d_k\ v_k\ \bar t_k \right]^T$.
Thus, assuming the odometer is reset at the beginning of each trip,
they used the measurement matrix $\mat{H} = \left[ 1\ 0\ 0 \right]$.
They used historical data to construct the
transition matrix at each step, and thus obtained a posterior
estimate of the new state which included time until arrival.


Unfortunately, the model implemented by \cite{Dailey_2001} was not directly applicable
when the observations come from a \gls{gps}.
To overcome this, \cite{Cathey_2003} proposed a general prescription
for making arrival time predictions from \gls{gps} data.
The main difference is in their first step, referred to as the tracker,
which involves estimation of the distance into trip from the reported \gls{gps} location;
that is, $\mat{Z}_k \approx g(\bY_k)$,
where $g$ is a map-matching algorithm.
Next, they assumed an unknown state consisting of distance into trip,
speed, and acceleration, $\bX_k = \left[ d_k\ v_k\ a_k \right]^T$,
and differential equations were used to generate the transition and covariance matrices.
The posterior state estimate, along with historical data,
was then used as an input to functions which made arrival time predictions,
rather than be estimated directly by the \kf{},
and the full prescription was demonstrated in Seattle and Orlando.


The model used by \cite{Cathey_2003} first required the
estimation of $\mat{Z}_k$ from the observations,
which introduces an additional source of error.
We saw in \cref{fig:colwill-loop} what can happen when this is not done correctly.
Another related issue is that the \kf{} assumes multivariate normality
in all states, so in the situation displayed in \cref{fig:colwill-loop},
there is no way of temporarily allowing \emph{both} situations to be plausible,
which can lead to carry-on errors as in the figure (right)---%
the bus is still considered to have departed,
even after the position was corrected.



\subsubsection{Data-based models}
\label{sec:data-models}

Over the following decade, a range of modeling approaches were implemented, demonstrated,
and deployed in transit systems around the world.
These included \gls{knn}, in which real-time trips are matched to similar historical trips,
and computer learning models, most notably \gls{ann} and \gls{svm},
which use historical data sets to learn relationships between variables
which can then be used with real-time data to make predictions
\citep{Park_1999,Jeong_2005,Yu_2006,Yu_2010,Yu_2011}.
These, particularly \gls{svm}, usually gave more accurate arrival time
predictions than the \kf{}, and were not limited to only a few stops ahead.
More importantly, they allowed researchers to include more complex features
unique to transit vehicles.


Perhaps the most important feature recognised in transit models is \emph{dwell time}.
This is defined here as the \emph{time lost due to stopping at a bus stop},
which includes the deceleration and acceleration period of the bus.
The technical details are given later in \cref{sec:bus-behaviour}.
\cite{Shalaby_2004} included dwell times in a \kf{} model,
although not explicitly,
and relied on the availability of \glspl{apc},
which provide estimates of the number of passengers boarding at each stop.
\cite{Jeong_2005}
incorporated dwell times into an \gls{ann} model based on detailed \gls{avl} data
that also provided arrival and dwell times for visited stops.


Another feature of bus models is that, in many situations,
there are multiple trips along the same route every day,
and \cite{Yu_2006} developed an \gls{svm} model which used the travel time
of the preceding bus as one of the variables used to predict arrival time.
In many situations, such as in urban areas,
several routes may converge and use the same set of bus stops,
in which case it would be useful to use the most recent bus from \emph{any} route.
\cite{Yu_2011} implemented \kf{}, \gls{knn}, \gls{ann}, and \gls{svm} models that did just that,
of which the latter was found to provide the best results.
However, their data was based on automatic toll readers on the highway,
rather than \gls{avl},
so their model was limited in its scalability.



\subsubsection{Particle Filter}
\label{sec:particle-filter}

Recently, there has been some use of a \pf{} in transit applications,
which is another Bayesian recursive filter similar to the \kf{},
but with fewer assumptions and more flexibility.
Instead of modeling the entire state,
the \pf{}, originally named the ``bootstrap filter'' by  \cite{Gordon_1993},
uses a \emph{sample of particles} from the distribution,
each with its own state $\bX_k^{(i)}$.


In the predict step,
each particle is fed independently into a \emph{transition function}, $f$,
which can be as simple or detailed as necessary,
allowing the inclusion of process noise, $\sigma_v^2$,
as well as any other parameters for the necessary features
(this is demonstrated in \cref{fig:pf_logic}):
\begin{equation}
  \label{eq:particle_transition}
  \bX_k^{(i)} = f(\bX_{k-1}^{(i)}, \sigma_v^2, \cdots).
\end{equation}
Since each particle is modeled independently,
there are no assumptions about the shape of the state distribution.


In the update step, each particle is assigned a weight, $w_i$, according to its likelihood
(which depends only on the observations and measurement error, $\sigma_y^2$):
\begin{equation}
  \label{eq:particle_weights}
  w_i = \frac{p(\bX_k^{(i)} | \bY_k, \sigma_y^2)}{\sum_{j=1}^M p(\bX_k^{(j)} | \bY_k, \sigma_y^2)}.
\end{equation}
The particles are then resampled with replacement according to their weights,
as in \gls{sir},
to obtain a sample from the posterior distribution \citep{Gordon_1993}.
Variations of (\ref{eq:particle_weights}) exist to increase the efficiency of the \pf{},
which we will likely need to consider when we begin
large-scale implementations of our model.


The likelihood for each particle is based on the distance between the particle
and the bus' reported \gls{gps} position.
Since each particle has its own value for the state parameters,
the distance into trip, $d_k^{(i)}$, can be transformed onto a geographic coordinate system
using the measurement function, $h$.
This is possible using the route shape information provided by \gls{gtfs} (\cref{sec:data}),
and is demonstrated in \cref{fig:gpsdist}.
The intermediate estimation of $\mat{Z}$ is no longer required,
which can help in overcoming situations where there are multiple plausible states:
in the loop example from earlier, some of the particles can be in one state
(heading into the loop, travelling slower),
while the rest are in the other (heading out of the loop, travelling faster);
the posterior sample will be multimodal until a new observation is obtained to
determine which state was true.

% \begin{figure}[!b]
%   \centering
%   \begin{subfigure}{0.4\textwidth}
%     \includegraphics[width=\textwidth]{gps-dist2.png}
%     %\caption{}
%     \label{fig:gpsdist-1}
%   \end{subfigure}
%   ~
%   \begin{subfigure}{0.4\textwidth}
%     \includegraphics[width=\textwidth]{gps-dist1.png}
%     %\caption{}
%     \label{fig:gpsdist-2}
%   \end{subfigure}
%   \caption{%
%   Each particle has a value for distance into trip, $d_k^{(i)}$ (left) which can be transformed
%   into a geographic coordinate (right) using the shape information associated with
%   the given route provided by \gls{gtfs}.}
%   \label{fig:gpsdist}
% \end{figure}

Being able to avoid unnecessary assumptions or estimations makes the
\pf{} a very attractive candidate for modeling real-time \gls{gps}-based data.
\cite{Chen_2014} used a \pf{} to model travel time in real-time,
using historical data sets to propose new trajectories for particles.
\cite{Hans_2015} implemented one to model a transit system
in order to devise strategies
to reduce the bunching behavior of buses along the same route.
Their model included those features discussed in \cref{sec:data-models},
namely dwell times and travel times of previous trips.
Despite these few examples,
we have not seen evidence of \pf{} models deployed
to predict arrival times in real-time based solely on \gls{gps} locations provided
by \gls{gtfs}.



\subsection{Particulars of Bus Behaviour}
\label{sec:bus-behaviour}

Many of the models used in transit research were originally developed for
more generic tracking applications or traffic state models;
however, there are several features that are unique to transit vehicles,
such as bus lanes and bus stops \citep{Yu_2011},
so models have needed adjusting accordingly.
The two which are of particular importance are dwell time and headway,
which have become a requirement in modern bus prediction methods
\citep{Jeong_2005,Hans_2014,Hans_2015,Cats_2016}.


Dwell time is defined as \emph{the total time lost due to stopping at a bus stop}.
This is shown visually in \cref{fig:dwell-time},
which shows the hypothetical paths of two vehicles,
one of which stops while the other does not.
Therefore, there are two components to consider:
whether the bus stops, and if so, for how long.
The former can be expressed as a Bernoulli random variable, $p_j \sim \mathcal{B}(\pi_j)$,
where $\pi_j$, the average proportion of buses that stop,
is modeled according to the data available and the framework being used.


If a bus does stop, it must first decelerate,
and after servicing the bus stop it will take some time to accelerate back up to speed.
Additionally, there is time taken to open and close the doors.
These delays are usually combined into a common affect, $\gamma$,
as they apply to every bus and stop.
Once a bus has stopped, it will remain there while passengers board and disembark.
This can be modeled with an exponential distribution,
$\tau'_j \sim \mathcal{E}(\mu_\tau)$,
or else more complex queuing models can be constructed if the data allows
\citep{Hans_2015}.
The total dwell time experienced by the vehicle is $\tau_j = p_j(\gamma + \tau_j')$,
as shown in \cref{fig:dwell-time}.

% \begin{figure}[bt]
%   \centering
%   \includegraphics[width=0.8\textwidth]{dwell_time.png}
%   \caption{Dwell time, $\tau_j$, is the total time lost due to stopping at a bus stop (indicated by the dashed black line).}
%   \label{fig:dwell-time}
% \end{figure}

The other important feature is headway,
which is the \emph{time delay between consecutive buses},
and can affect both travel times and dwell times.
If two consecutive routes are close together,
then the travel times are expected to be similar;
however, since they are both servicing the same route,
we expect the number of passengers waiting at a stop---and therefore
the dwell time---to be inversely proportional to the headway
\citep{Hans_2014,Hans_2015}.




\subsection{Availability of AVL Data}
\label{sec:data-types}

While there has been a lot of research in transit applications,
many of them have been concerned with operations control,
for example reducing bus bunching behaviour \citep{Hans_2015},
or else they require more informative data than is available in most systems,
such as \glspl{apc} and actual arrival times.
For the latter, it is usually because the \gls{avl} recording is triggered by stops
\citep{Hans_2015},
is high frequency \citep{Chang_2010},
or in some cases the test data was collected manually
\citep{Yu_2010}.


In Auckland's transport system, the only publicly available data is provided
by \gls{gps}, which is updated approximately every 30~seconds,
so arrival times must be estimated as latency variables and,
in a real-time deployment, will remain unknown.
Another issue specifically with Auckland Transport is that,
over the next few years,
the route structure is being completely redesigned
and rolled out slowly across the city.
Therefore, focus will be on using real-time and recent data (same day, week) to predict arrival times,
rather than relying on historical data collected over months or years.


