
\section{\Rt{} network model}
\label{sec:nw_realtime}

The state of the network, $\NWstate_c$, at time $t_c$
is the average travel time of transit vehicles along
each segment $\ell \in \{1, \ldots, L\}$.
There are two things we want from the model:
to update the \rt{} state as vehicles traverse the network,
and forecast ahead for improving arrival time prediction,
particularly going into and coming out of peak times.

Each individual measurement of travel time is typically very noisy,
due to many sources of uncertainty with observations.
We did some exploration of travel time from historical data,
using $\Varr_{rm} - \Vdep_{rm-1}$ as the estimate.

Therefore we are using another Bayes' filter model,
this time using a \kf{} (\cref{sec:kf}) to estimate the state.
In this model, the transition matrix $F_c = I$ for all $c$,
indicating that travel times do not change on average.
Similarly, the measurement matrix $H_c = I$,
as the measurements are, in the case, of the state directly.
So the model is
\begin{equation}
\label{eq:nw_model}
\begin{split}
\NWstate_\ell_c = \NWstate_\ell_{c-1} + v_\ell_c,
    \quad v_\ell_c \sim \Normal{0}{\NWnoise_\ell} \\
\NWobs_\ell_c = \NWstate_\ell_c + w_\ell_c,
    \quad w_\ell_c \sim \Normal{0}{\NWerr_\ell}
\end{split}
\end{equation}

It is possible to modify \cref{eq:nw_model} to include
a rate parameter,
which would be positive going into peak periods
(increase in travel time),
and negative coming out of them;
however, this doubles the size of the state.


It is also possible to include a control vector,
and associated control matrix,
which would be used to improve the model.
For example,
we could use the change in state of adjacent road segments
to model changes in the current segment.



\subsection{Predict step}
\label{eq:kf_predict}

The state prediction is straightforward if we stick with
\cref{eq:nw_model}.
The estimated state has mean $\hat\NWstate_{c|c-1} = \E{\NWstate_c | X_{0:c-1}}$
and variance $\NWvar_{c|c-1} = \Var{\NWstate_c | X_{0:c-1}}$,
which are predicted using
\begin{equation}
\label{eq:nw_kf_predict}
\begin{split}
\hat\NWstate_{c|c-1} &=
    \hat\NWstate_{c-1|c-1} \\
\NWvar_{c|c-1} &= \NWvar_{c-1|c-1} + \NWnoise_c
\end{split}
\end{equation}
What this looks like is shown in \cref{fig:nw_kf1}.

<<nw_kf,message=FALSE,echo=FALSE,fig.height=3,fig.width=8,fig.cap="Network state prediction assuming constant speed.",cache=TRUE>>=
suppressPackageStartupMessages(library(tidyverse))
set.seed(345)
d <- tibble(
    t = 1:30,
    x = 30 + cumsum(c(
        rnorm(15, 0, 1),
        rnorm(15, c(-0.5, 0), 1)
    )),
    err = runif(30, 3, 4)
)
d2 <- d[30, ] %>%
    bind_rows(tibble(
        t = 35,
        x = d$x[30],
        err = d$err[30] + 3
    ))
p <- ggplot(d, aes(t, x)) +
    geom_ribbon(aes(ymin = x - err, ymax = x + err),
        fill = "#eeeeee") +
    geom_path() +
    geom_point(data = d[30, ]) +
    theme_minimal() +
    theme(panel.grid = element_blank()) +
    scale_x_continuous(breaks = NULL) +
    scale_y_continuous(breaks = NULL) +
    xlab("Time (s)") + ylab("Travel time (s)")

p + geom_ribbon(aes(ymin = x - err, ymax = x + err),
        data = d2, fill = "red", alpha = 0.1) +
    geom_path(data = d2, color = "red", lty = 2) +
    geom_point(data = d2[2,], colour = "red")

d2$x[2] <- d2$x[1] - 2
p + geom_ribbon(aes(ymin = x - err, ymax = x + err),
        data = d2, fill = "red", alpha = 0.1) +
    geom_path(data = d2, color = "red", lty = 2) +
    geom_point(data = d2[2,], colour = "red")

@


The main downside of this is that it really does depend heavily on the data,
and twice per day we get peak times which
temporarily increase travel times.
So, if we have historical data saying that, at this time,
there is usually an increase in travel time of $\psi$ seconds.


\subsection{Update step}
\label{eq:kf_update}
