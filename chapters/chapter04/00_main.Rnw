\chapter{Transit network}
\label{cha:network_model}

The collection of bus stops and intersections, and the roads which connect them, we refer to as a \emph{transit network}. The \emph{state} of this network changes in response to events throughout the city, some of which are predictable---peak traffic, for example---while others are not, such as accidents or weather events. In chapter 3, we measured this state by tracking individual vehicles as they moved through the network. Now we shall discuss the network state itself, how it changes over time, how we use the observations to update its state, and how we can make short-term forecasts for use in arrival time estimation (see chapter 5).


To estimate the network's state from vehicle travel time observations, we need to understand the relationship between them. The underlying state of the network is how fast (or slow) vehicles travel through it, which changes over time. We use \emph{average speed} over the length of a segment, which represents the speed of the entire traffic flow, and is based on the length of the segment and how long vehicles take to travel along it,
\begin{equation}
\label{eq:ch4:average_speed_formula}
\text{average speed} = \frac{
\text{segment length}
}{
\text{travel time along segment}
}.
\end{equation}
However, there are a variety of factors which affect the average speed of individual buses, such as driver behaviour, cyclists sharing the road, variance between lanes, or pedestrians crossing the road, to names a few. Thus, even buses travelling along a road at the same time often have different (average) speeds, which leads to a \emph{distribution}, as demonstrated in the top half of \cref{fig:nw_model_hierarchy}. To further complicate matters, the observed vehicle speed averages, as measurements, come with a level of uncertainty, as shown in the second half of \cref{fig:nw_model_hierarchy}.


In this section, we present a model for estimating the distribution of vehicle speed along roads throughout the transit network. As with the vehicle model, we must keep in mind the real-time nature of the application, so computational efficiency is an important consideration. In \Cref{sec:nw_realtime}, we describe the real-time implementation of the model using a Kalman filter, while \cref{sec:nw_par_est} outlines the estimation of the necessary model parameters (the rate at which average traffic speed changes over time and the variability between vehicles) from historical data. The model's forecasting ability can also be improved with this historical data, as we discuss in \cref{sec:nw_hist_model} and see again in \cref{cha:prediction}. Finally, we describe the computational aspects of the model's real-time implementation and its feasibility in \cref{sec:nw_implementation}.



<<nw_model_hierarchy,echo=FALSE,fig.width=6,fig.height=6,out.width="0.8\\textwidth",fig.align="center",fig.cap="The hierarchy of travel time uncertainty along a single road segment, at one point in time, is separated into \\emph{between-vehicle variability} and \\emph{measurement error}. The top curve shows the overall distribution of vehicle travel times, with solid arrows showing the actual travel times of four vehicles. The second level shows the measurement uncertainty for each vehicle, with the observed values shown as dots at the bottom of the graph.">>=
suppressPackageStartupMessages({
    library(dplyr)
    library(ggplot2)
})

beta <- 60
psi <- 20

d <- tibble(x = seq(0, 120, length = 1001)) %>%
    mutate(t = dnorm(x, beta, psi) / dnorm(beta, beta, psi))

obs <-
    tibble(
        B = c(50, 55, 75, 100),
        E = c(3, 2, 6, 5),
        b = c(55, 51, 70, 110),
    )

tr <- 0.005
dn <- dnorm(0, 0, 3)
d <- d %>%
    mutate(
        t1 = dnorm(x, obs$B[1], obs$E[1]) / dn,
            # dnorm(obs$B[1], obs$B[1], obs$E[1]),
        t2 = dnorm(x, obs$B[2], obs$E[2]) / dn,
            # dnorm(obs$B[1], obs$B[1], obs$E[1]),
        t3 = dnorm(x, obs$B[3], obs$E[3]) / dn,
            # dnorm(obs$B[1], obs$B[1], obs$E[1]),
        t4 = dnorm(x, obs$B[4], obs$E[4]) / dn
            # dnorm(obs$B[1], obs$B[1], obs$E[1])
    ) %>% mutate(
        t1 = ifelse(t1 < tr, NA, t1),
        t2 = ifelse(t2 < tr, NA, t2),
        t3 = ifelse(t3 < tr, NA, t3),
        t4 = ifelse(t4 < tr, NA, t4)
    )

ggplot(d, aes(x)) + geom_path(aes(y = t + 1)) +
    # add secondary bell curves
    geom_path(aes(y = t1 / 2), na.rm = TRUE) +
    geom_path(aes(y = t2 / 2), na.rm = TRUE) +
    geom_path(aes(y = t3 / 2), na.rm = TRUE) +
    geom_path(aes(y = t4 / 2), na.rm = TRUE) +
    geom_hline(yintercept = 0:1, lty = 2) +
    # add line segments from top to middle curve
    geom_segment(
        aes(x = B, xend = B,
            y = dnorm(B, beta, psi) / dnorm(beta, beta, psi) + 0.95,
            yend = dnorm(B, B, E) / dn / 2 + 0.05,
        ),
        arrow = arrow(length = unit(0.1, "inches")),
        data = obs) +
    # lines to points
    geom_segment(
        aes(x = b, xend = b,
            y = dnorm(b, B, E) / dn / 2,
            yend = -1
        ),
        # arrow = arrow(length = unit(0.09, "inches")),
        lty = 3,
        data = obs) +
    # add the observed points
    geom_point(aes(b, -1.0), data = obs) +
    # some labels
    # annotate("label", 25, 0.5, label = "Between-vehicle variation") +
    # annotate("label", 25, -0.5, label = "Measurement error") +
    theme_void()
@

\input{DIRNAME/construct_model.tex}
\input{DIRNAME/realtime_model.tex}
\input{DIRNAME/parameter_estimation.tex}
\input{DIRNAME/historical_model.tex}
\input{DIRNAME/implementation.tex}
