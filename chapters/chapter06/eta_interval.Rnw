\subsection{Interval estimate}
\label{sec:etas-interval}


Deciding on a ``best'' single-value estimate of arrival time is exceedingly difficult given the amount of uncertainty involved. An alternative approach would be to provide \emph{two} estimates---a lower and upper bound---that is to say, a \emph{prediction interval}. To do so, we need to consult the following criteria:
the probability of the bus arriving outside the interval versus the width of the interval; and
the probability of the bus arriving before the lower bound versus the expected waiting time (given arrival at the lower bound).
The first point corresponds to how useful---from a commuter's point of view---the prediction is: a narrow interval is favourable, but we must balance that with covering a reasonable range of plausible values. The second point again relates to \emph{cost}, which we can most easily express as expected waiting time; there are, of course, other costs (such as being late for work), which we examine more closely in \cref{sec:etas-journey-planning}.


<<eta_ci_load,echo=FALSE,cache=TRUE>>=
suppressPackageStartupMessages({
  library(tidyverse)
  library(RSQLite)
  library(dbplyr)
  library(patchwork)
})

qfile <- "data/eta_ints_symmetric.rda"
if (file.exists(qfile)) {
  load(qfile)
}
con <- dbConnect(SQLite(), "data/eta_quantiles.sqlite")
etas <- con %>% tbl("etas")

intx <- function(etas, p) {
  if (p <= 0 | p >= 1) stop("p should be between 0 and 1 (exclusive)")
  alpha <- 1 - p
  etas %>%
    group_by(trip_id, stop_sequence, timestamp) %>%
    select(trip_id, stop_sequence, timestamp, eta, quantile,
      gtfs_eta, time_until_arrival) %>%
    filter(quantile >= !!alpha / 2 & quantile <= 1 - !!alpha / 2) %>%
    collect() %>%
    summarize(
      pf_lower = min(eta, na.rm = TRUE),
      pf_upper = max(eta, na.rm = TRUE) + 1,
      gtfs = max(gtfs_eta, na.rm = TRUE),
      actual = max(time_until_arrival, na.rm = TRUE)
    ) %>%
    # collect() %>%
    ungroup() %>%
    filter(gtfs - actual > -60*60 & gtfs - actual < 2*60*60) %>%
    mutate(
      gtfs = gtfs %/% 60,
      actual = actual / 60,
      width = pf_upper - pf_lower
    )

}
if (!exists("int99")) int99 <- intx(etas, 0.99)
if (!exists("int95")) int95 <- intx(etas, 0.95)
if (!exists("int90")) int90 <- intx(etas, 0.90)
if (!exists("int80")) int80 <- intx(etas, 0.80)

dbDisconnect(con)

save(int99, int95, int90, int80, file = qfile)
@




<<eta_cis,echo=FALSE,cache=TRUE,dependson="eta_ci_load",fig.width=10,fig.height=3,out.width="\\textwidth",fig.align="center",fig.cap="ETA CIs">>=
# coverage prob
cov99 <- with(int99, mean(actual >= pf_lower & actual <= pf_upper))
cov95 <- with(int95, mean(actual >= pf_lower & actual <= pf_upper))
cov90 <- with(int90, mean(actual >= pf_lower & actual <= pf_upper))
cov80 <- with(int80, mean(actual >= pf_lower & actual <= pf_upper))
cov <- c(cov99, cov95, cov90, cov80)

pbefore99 <- with(int99, mean(actual < pf_lower))
pbefore95 <- with(int95, mean(actual < pf_lower))
pbefore90 <- with(int90, mean(actual < pf_lower))
pbefore80 <- with(int80, mean(actual < pf_lower))
pbefore <- c(pbefore99, pbefore95, pbefore90, pbefore80)

len99 <- with(int99, mean(pf_upper - pf_lower))
len95 <- with(int95, mean(pf_upper - pf_lower))
len90 <- with(int90, mean(pf_upper - pf_lower))
len80 <- with(int80, mean(pf_upper - pf_lower))
len <- c(len99, len95, len90, len80)

d <- tibble(
  p = c(99, 95, 90, 80),
  alpha = 1 - (p / 100),
  cov = cov, pbefore = pbefore, len = len
)

p1 <- ggplot(d, aes(cov, alpha)) +
  geom_point() + geom_segment(aes(xend = 0, yend = alpha)) +
  scale_x_continuous("Coverage probability")
p2 <- ggplot(d, aes(pbefore, alpha)) +
  geom_point() + geom_segment(aes(xend = 0, yend = alpha)) +
  scale_x_continuous("P(bus arrives before lower)")
p3 <- ggplot(d, aes(len, alpha)) +
  geom_point() + geom_segment(aes(xend = 0, yend = alpha)) +
  scale_x_continuous("Average width (minutes)")

p1 + p2 + p3 &
  scale_y_continuous("Interval") &
  theme_classic()

@


The most straightforward intervals to compute are \emph{symmetric}\footnote{They are not perfectly symmetric, however, due to integer rounding}. That is, for a \mbox{$100(1-\alpha)$\%} interval we use $A_{\alpha/2}$ and $A_{1-\alpha/2} + 1$ (the plus one on the upper bound is so the upper bound is effectively rounded up). We computed intervals for $\alpha \in \{0.1, 0.05, 0.1, 0.2\}$, and for each evaluated the observed coverage, the probability that the bus arrived before the lower bound, and the average width (in minutes). The graphs in \cref{fig:eta_cis} show that for smaller values of $\alpha$ (larger coverage) the coverage probability and average width increase, which is to be expected. Similarly, the probability that the bus arrives before the lower bound (resulting in missing the bus) increases with $\alpha$.

An alternative to using symmetric intervals is to use asymmetric ones: in this scenario, the lower and upper bounds could be estimated using different criteria. For example, the lower bound might be chosen to minimise the chance of missing the bus, while the upper bound is chosen to balance excessive width while still covering as greater plausible range as possible. Again, we might also wish to vary the criteria depending on the proximity of the bus, the stop sequence, or headway. \textcolor{red}{[to do, I suppose]}
