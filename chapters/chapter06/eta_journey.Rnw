\section{Journey planning}
\label{sec:etas-journey-planning}

So far, we have explored probabilities and expectations associated with the arrival time of a given bus at a stop. However, there are several other applications where arrival time prediction can be used to make decisions. The first is to predict the arrival time of a given bus at a later stop and, more importantly, the probability that it arrives before a given time. For example, a passenger might want to know the probability a bus will get them to work on time. Secondly is to examing transfers: particularly in Auckland, many routes do not run to schedule, making it difficult for passengers who need to transfer from one route to another.


<<eta_journey_arrival_prep,echo=FALSE,cache=TRUE,message=FALSE,fig.height=5,out.width="\\textwidth",fig.cap="Route options",fig.align="center">>=

suppressPackageStartupMessages({
  library(tidyverse)
  library(ggmap)
  library(RSQLite)
})

curd <- setwd("../../data")
source("load_data.R")
setwd(curd)

# first find a trip to predict ...
start <- "125 Balmoral Drive, Auckland"
end <- "38 Princes Street, Auckland"

coords <- tibble(
  which = c("Start", "End"),
  lat = c(-36.888387, -36.852788),
  lon = c(174.754387, 174.768420)
)

routeA <- c("25B", "25L")
routeB <- c("27H", "27W")

stops <- tibble(
  which = c("Start", "End", "Start", "End"),
  option = c("A", "A", "B", "B"),
  id = c("8417", "7089", "8517", "7147"),
  walk = c(9, 2, 11, 3)
)

con <- dbConnect(SQLite(), db)
route_info <- con %>% tbl("routes") %>%
  filter(
    route_short_name %in% c(routeA, routeB) &
    version == 82.21 &
    (
      route_long_name %like% "%To Britomart%" |
      route_long_name %like% "%To City Centre%"
    )
  ) %>%
  select(route_id, route_short_name, route_long_name) %>%
  left_join(
    con %>% tbl("trips") %>% group_by(route_id) %>%
      summarize(shape_id = min(shape_id, na.rm = TRUE)),
    by = "route_id"
  ) %>%
  collect() %>%
  mutate(
    option = ifelse(route_short_name %in% routeA, "A", "B")
  )
trip_info <- con %>% tbl("trips") %>%
  filter(route_id %in% !!route_info$route_id) %>%
  select(trip_id, route_id) %>%
  left_join(
    con %>% tbl("stop_times") %>% filter(stop_sequence == 1) %>%
      select(trip_id, departure_time) %>%
      rename(trip_start_time = departure_time),
    by = "trip_id"
  ) %>%
  collect() %>%
  mutate(
    trip_start_time = stringr::str_sub(trip_start_time, 1, 5)
  )
sids <- tapply(route_info$shape_id, route_info$option, function(x) x[1])
shapes <- con %>% tbl("shapes") %>%
  filter(shape_id %in% !!sids) %>%
  select(shape_id, shape_pt_lat, shape_pt_lon, shape_pt_sequence) %>%
  arrange(shape_id, shape_pt_sequence) %>%
  collect() %>%
  filter(
    shape_pt_lat > coords$lat[1] - 0.003 &
    shape_pt_lat < coords$lat[2] + 0.003
  ) %>%
  mutate(
    option = as.character(
      sapply(shape_id, function(id) names(sids)[which(sids == id)])
    )
  )
stop_info <- con %>% tbl("stops") %>%
  filter(stop_code %in% !!stops$id & version == 82.21) %>%
  select(stop_id, stop_code, stop_lon, stop_lat) %>%
  collect()
stops <- stops %>% left_join(stop_info, by = c("id" = "stop_code"))
#trip_info %>% group_by(route_id) %>%
#  summarize(trip_id = first(trip_id)) %>%
#  left_join(
#    con %>% tbl("stop_times") %>%
#      filter(stop_id %in% !!stop_info$stop_id) %>%
#      select(trip_id, stop_id, stop_sequence, arrival_time) %>% collect(),
#    by = "trip_id"
#  )
route_info <- route_info %>%
  mutate(
    from_seq = c(23L, 19L, 28L, 29L),
    to_seq = c(34L, 30L, 42L, 43L)
  )
dbDisconnect(con)

xlim <- range(shapes$shape_pt_lon)
ylim <- range(shapes$shape_pt_lat)

## Get a map:
map <- get_stamenmap(c(xlim[1], ylim[1], xlim[2], ylim[2]), zoom = 15)
ggmap(map) +
  geom_path(
    aes(shape_pt_lon, shape_pt_lat, group = option, colour = option),
    data = shapes,
    lwd = 2
  ) +
  geom_path(
    aes(shape_pt_lon, shape_pt_lat, group = option, colour = option),
    data = shapes %>% filter(option == "A"),
    lwd = 2,
    lty = 2
  ) +
  geom_segment(
    aes(lon, lat, xend = lon, yend = lat + 0.0015),
    data = coords
  ) +
  geom_point(aes(lon, lat),
    data = coords,
    size = 3
  ) +
  geom_label(aes(lon, lat, label = which),
    data = coords,
    nudge_y = 0.0015
  ) +
  geom_point(aes(stop_lon, stop_lat, colour = option),
    data = stops,
    shape = 21,
    fill = "white",
    size = 3,
    stroke = 2
  ) +
  theme_void() +
  labs(colour = "Route option")

@



The first example we look at is a simple journey planning exercise: given the choice of two different options, which is the best to take? In \cref{fig:eta_journey_arrival_prep} we demonstrate such a situation for someone at the point indicated "Start", who has two possible options to get to the point indicated "End"\footnote{This is indeed the University of Auckland's statistics department, which seemed an appropriate choice}. Each of the options involve a short walk, so this needs to be accounted for when making a decision.


<<eta_journey_arrival,echo=FALSE,cache=TRUE,dependson="eta_journey_arrival_prep",message=FALSE,fig.width=8,fig.height=5,out.width="\\textwidth",fig.cap="ETA predictions for two route options. The coloured curves represent the CDF of arrival time for individual trips made at 7am. The vertical black lines indicate the estimated walking time (according to Google Maps) from the Start location to each stop.",fig.align="center">>=

con <- dbConnect(SQLite(), "data/eta_quantiles.sqlite")

trip_etas <- con %>% tbl("etas")

trip_results <- lapply(seq_len(nrow(route_info)),
  function(i) {
    rid <- route_info$route_id[i]
    tids <- trip_info %>% filter(route_id == rid) %>% pull(trip_id)
    rseq <- c(route_info$from_seq[i], route_info$to_seq[i])
    trip_etas %>%
      filter(
        trip_id %in% tids &
        stop_sequence %in% rseq
      ) %>%
      collect()
  }
) %>%
  bind_rows() %>%
  mutate(timestamp = as.POSIXct(timestamp, origin = "1970-01-01")) %>%
  left_join(trip_info, by = "trip_id")

# commuter ready to leave at 7am
trip_results_after_7 <- trip_results %>%
  group_by(trip_start_time) %>%
  filter(timestamp > as.POSIXct("2019-08-29 7:00:00")) %>%
  group_modify(~{
    .x %>% mutate(
      in_range = any(
        .x$timestamp + eta * 60 > as.POSIXct("2019-08-29 7:00:00") & .x$timestamp + eta * 60 < as.POSIXct("2019-08-29 7:45:00")
      )
    )
  }) %>%
  ungroup() %>%
  filter(in_range) %>%
  select(trip_id, trip_start_time, stop_sequence, timestamp, eta, quantile,
    actual_arrival, time_until_arrival, gtfs_eta, route_id) %>%
  left_join(
    route_info %>% select(route_id, route_short_name, option, from_seq, to_seq),
    by = "route_id"
  ) %>%
  mutate(
    is_origin = as.integer(stop_sequence == from_seq),
    is_destination = as.integer(stop_sequence == to_seq)
  )

trip_eta_results <- trip_results_after_7 %>%
  filter(is_origin == 1) %>%
  group_by(trip_id) %>%
  group_modify(~{
    .x %>% filter(timestamp == min(.x$timestamp))
  }) %>%
  left_join(stops %>% filter(which == "Start") %>% select(option, walk))

ggplot(trip_eta_results, aes(timestamp + eta * 60, quantile,
  group = trip_id, colour = route_short_name)) +
  geom_path() +
  geom_label(
    aes(label = trip_start_time),
    data = trip_eta_results %>% filter(quantile == 0)
  ) +
  facet_grid(option ~ .) +
  geom_vline(aes(xintercept = as.POSIXct("2019-08-29 7:00:00") + walk * 60)) +
  geom_text(
    aes(
      x = as.POSIXct("2019-08-29 7:00:00") + walk * 60,
      y = 0.5,
      label = paste(walk, "min walk"),
      group = NULL,
      colour = NULL
    ),
    data = stops %>% filter(which == "Start"),
    angle = 90,
    nudge_x = -30
  ) +
  theme_classic() +
  theme(panel.background = element_blank()) +
  scale_x_datetime("Estimated arrival time at 7am") +
  scale_y_continuous("P(A < a)") +
  labs(colour = "Route")

## mission 1: A or B to catch first bus?
#trip_results_arrival <-

#trip_results_after_7 %>%
#  filter(is_origin == 1) %>%
#  select(-from_seq, -to_seq, -is_origin, -is_destination) %>%
#  left_join(stops %>% filter(which == "Start") %>% select(option, walk)) %>%
#  arrange(timestamp, eta) %>%
#  group_by(trip_id) %>%
#  group_modify(~{
#    .x %>% mutate(
#      make_it = walk < eta
#    ) %>%
 #   group_by(timestamp) %>%
 #   summarize(
#      p_make_it = mean(make_it),
#      would_make_it = mean(walk < time_until_arrival / 60)
#    )
#  }) %>% arrange(timestamp)


@


\Cref{fig:eta_journey_arrival} shows the arrival time predictions by way of their \glspl{cdf} for upcoming trips at each stop, as at 7am. We also indicate the walking time to each of these stops, which indicates that, although option B has a bus arriving sooner, unless the passenger runs they will likely miss it. Ignoring this early trip, both options have a bus arriving shortly after the passenger does (and by coincidence the probability that they miss this next viable bus is less than 10\%).


<<eta_journey_arriveby,echo=FALSE,cache=TRUE,dependson="eta_journey_arrival",message=FALSE,fig.width=8,fig.height=5,out.width="\\textwidth",fig.cap="ETA predictions for two route options. The coloured curves represent the CDF of arrival time for individual trips made at 7am. The vertical black lines indicate the estimated walking time (according to Google Maps) from the Start location to each stop.",fig.align="center">>=


# commuter ready to leave at 7am
trip_results_before_8 <- trip_results %>%
  group_by(trip_start_time) %>%
  filter(timestamp > as.POSIXct("2019-08-29 7:00:00")) %>%
  group_modify(~{
    .x %>% mutate(
      in_range = any(
        .x$timestamp + eta * 60 > as.POSIXct("2019-08-29 7:45:00") & .x$timestamp + eta * 60 < as.POSIXct("2019-08-29 8:00:00")
      )
    )
  }) %>%
  ungroup() %>%
  filter(in_range) %>%
  select(trip_id, trip_start_time, stop_sequence, timestamp, eta, quantile,
    actual_arrival, time_until_arrival, gtfs_eta, route_id) %>%
  left_join(
    route_info %>% select(route_id, route_short_name, option, from_seq, to_seq),
    by = "route_id"
  ) %>%
  mutate(
    is_origin = as.integer(stop_sequence == from_seq),
    is_destination = as.integer(stop_sequence == to_seq)
  )


trip_eta_results2 <- trip_results_before_8 %>%
  filter(is_destination == 1) %>%
  group_by(trip_id) %>%
  group_modify(~{
    .x %>% filter(timestamp == min(.x$timestamp))
  }) %>%
  left_join(stops %>% filter(which == "End") %>% select(option, walk))

ggplot(trip_eta_results2, aes(timestamp + eta * 60, quantile,
  group = trip_id, colour = route_short_name)) +
  geom_path() +
  geom_label(
    aes(label = trip_start_time),
    data = trip_eta_results2 %>% filter(quantile == 0)
  ) +
  facet_grid(option ~ .) +
  geom_vline(aes(xintercept = as.POSIXct("2019-08-29 8:00:00") - walk * 60)) +
  #geom_vline(aes(xintercept = actual_arrival, colour = route_short_name)) +
  geom_text(
    aes(
      x = as.POSIXct("2019-08-29 8:00:00") - walk * 60,
      y = 0.5,
      label = paste(walk, "min walk"),
      group = NULL,
      colour = NULL
    ),
    data = stops %>% filter(which == "End"),
    angle = -90,
    nudge_x = 60
  ) +
  theme_classic() +
  theme(panel.background = element_blank()) +
  scale_x_datetime("Estimated arrival time at 7am") +
  scale_y_continuous("P(A < a)") +
  labs(colour = "Route")



@


<<eta_journey_results,echo=FALSE,cache=TRUE,dependson="eta_journey_arriveby",message=FALSE,fig.width=8,fig.height=5,out.width="\\textwidth",fig.cap="Results of the journey planning application, including actual arrival times.">>=

trip_eta_results %>%
  group_by(trip_id) %>%
  summarize(
    timestamp = first(timestamp),
    trip_start_time = first(trip_start_time),
    route_short_name = first(route_short_name),
    option = first(option),
    walk = first(walk),
    eta_q05 = timestamp + max(eta[quantile <= 0.025]) * 60,
    eta_q50 = timestamp + max(eta[quantile <= 0.5]) * 60,
    eta_q95 = timestamp + max(eta[quantile <= 0.95]) * 60,
    actual = as.POSIXct(first(actual_arrival), origin = "1970-01-01"),
    gtfs = timestamp + first(gtfs_eta)
  ) %>%
  ggplot(aes(y = trip_start_time, colour = route_short_name)) +
    geom_point(aes(eta_q50)) +
    geom_segment(
      aes(
        x = eta_q05, xend = eta_q95, yend = trip_start_time
      )
    ) +
    facet_grid(option+route_short_name ~ ., scales = "free_y") +
    geom_vline(aes(xintercept = as.POSIXct("2019-08-29 7:00:00") + walk * 60)) +
    geom_point(aes(actual), colour = "black") +
    geom_point(aes(gtfs), shape = 4)



trip_eta_results2 %>%
  group_by(trip_id) %>%
  summarize(
    timestamp = first(timestamp),
    trip_start_time = first(trip_start_time),
    route_short_name = first(route_short_name),
    option = first(option),
    walk = first(walk),
    eta_q05 = timestamp + max(eta[quantile <= 0.025]) * 60,
    eta_q50 = timestamp + max(eta[quantile <= 0.5]) * 60,
    eta_q95 = timestamp + max(eta[quantile <= 0.95]) * 60,
    actual = as.POSIXct(first(actual_arrival), origin = "1970-01-01"),
    gtfs = timestamp + first(gtfs_eta)
  ) %>%
  ggplot(aes(y = trip_start_time, colour = route_short_name)) +
    geom_point(aes(eta_q50)) +
    geom_segment(
      aes(
        x = eta_q05, xend = eta_q95, yend = trip_start_time
      )
    ) +
    facet_grid(option+route_short_name ~ ., scales = "free_y") +
    geom_vline(aes(xintercept = as.POSIXct("2019-08-29 8:00:00") - walk * 60)) +
    geom_point(aes(actual), colour = "black") +
    geom_point(aes(gtfs), shape = 4)


@