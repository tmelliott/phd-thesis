\subsection{Normal approximation}
\label{sec:prediction_arrival_time_normal}

Due to the computational demand of the particle filter, significant speed improvements can be obtained if we were to use a normal approximation instead. The network state is already represented as multivariate normal random variable, which we can easily apply transformations to sum over the dimensions. The issues lies with stop dwell times, which have a point mass at zero, leading to a mixture predictive distribution: for each stop the vehicle must pass, there are twice as many components, so after $m$ stops there will be $2^m$ components. However, these mostly converge after a few stops as shown in \cref{fig:component_convergence}.


In order to use a mixture of normals to encorporate stopping uncertainty, we express the mean and uncertainty as vectors $\tilde\mu$ and $\tilde\sigma^2$, respectively, along with a third vector $\tilde\pi$ denoting the $\tilde N$ mixture weights\footnote{We are using the tilde (\tilde) over parameters to help distinguish them from others used throughout the thesis}, such that
\begin{equation}
\label{eq:mixture_weights}
\tilde\pi_i > 0, i = 1, \ldots, \tilde N
\text{ and } \sum_{i=1}^{\tilde N} \tilde\pi_i = 1.
\end{equation}
The arrival time at stop $j + n$ is given by
\begin{equation}
\label{eq:arrival_time_normal_approx}
\Tarr_{j+n} | \tilde\mu, \tilde\sigma^2, \tilde\pi, \RouteNWstate =
\sum_{\ell=j}^{j+n-1} \RouteNWstateseg_\ell +
\sum_{i=1}^{\tilde N} \tilde\pi_i z_i,\quad
z_i \sim \Normal{\tilde\mu_i}{\tilde\sigma^2_i}.
\end{equation}


To compute each component, each component $i$ has an indicator of whether or not it stopped at stop $m$, $I_{im} = \{0,1\}$. Then
\begin{equation}
\label{eq:mixture_dwell_times}
\begin{split}
\tilde\mu_i &= \sum_{m=j}^{j+n} I_{im} \dwell_m \\
\tilde\sigma_i^2 &= \sum_{m=j}^{j+n} I_{im} \dwellvar_m
\end{split}
\end{equation}
since we are assuming dwell times at individual stops are independent of each other.


The vector of indicators is simply a branching tree for each stop, all current components are duplicated: one is assigned $I_{i,m+1} = 1$ and the other 0.


Finally, mixture weights are obtained through the stopping probability at each stop, $\pi_j$:
\begin{equation}
\label{eq:mixture_weights}
\begin{split}
\tilde\pi_i &= \prod_{m=j}^{j+n} \tilde p_{im} \\
\tilde p_{im} &=
\begin{cases}
\pi_m & \text{if } I_{im} = 1 \\
1 - \pi_m & \text{otherwise.}
\end{cases}
\end{split}
\end{equation}


This all works okay for predicting a few stops ahead, but after some time the mixture weights become small and the components combine into more-or-less a single one, as shown in \cref{fig:}. To prevent $\tilde N$ from becoming too large, the full distribution is simplified into a single component with mean and variance those of the mixture. These can be computed by
\begin{equation}
\label{eq:mixture_mean}
\begin{split}
\E{\Tarr_m | \tilde\pi, \tilde\mu, \tilde\sigma^2, \RouteNWstate} &=
\E{\sum_{\ell=j}^{j+n-1} \RouteNWstateseg_\ell +
  \sum_{i=1}^{\tilde N} \tilde\pi_i z_i}
= \sum_{\ell=j}^{j+n-1} \E{\RouteNWstateseg_\ell} +
  \sum_{i=1}^{\tilde N} \tilde\pi_i \E{z_i} \\
&= \sum_{\ell=j}^{j+n-1} \hat\RouteNWstateseg_\ell +
  \sum_{i=1}^{\tilde N} \tilde\pi_i \tilde\mu_i
\end{split}
\end{equation}
and
\begin{equation}
\label{eq:mixture_variance}
\begin{split}
\Var{\Tarr_m | \tilde\pi, \tilde\mu, \tilde\sigma^2, \RouteNWstate} &=
\Var{\sum_{\ell=j}^{j+n-1} \RouteNWstateseg_\ell +
  \sum_{i=1}^{\tilde N} \tilde\pi_i z_i}
= \sum_{\ell=j}^{j+n-1} \Var{\RouteNWstateseg_\ell} +
  \sum_{i=1}^{\tilde N} \tilde\pi_i^2 \Var{z_i} \\
&= \sum_{\ell=j}^{j+n-1} \hat\RouteNWstatesegvar_\ell +
  \sum_{i=1}^{\tilde N} \tilde\pi_i \tilde\sigma_i^2
\end{split}
\end{equation}
by assuming segment travel tiem and dwell time are independent---assuming otherwise makes this model impossible to work with; indeed, this model versus the particle filter (which makes no such assumption) is effectively testing the viability of this assumption.


For quantiles $q_\alpha$ we need to use an optimisation algorithm to solve
\begin{equation}
\label{eq:mixture_quadratic}
\left[
  p\left(\Tarr_m | \tilde\pi, \tilde\mu, \tilde\sigma^2, \RouteNWstate\right) - q_\alpha
\right]^2 = 0
\end{equation}
which is straightforward using Brent's Algorithm \citep{brent}, which is implemented in the Boost C++ library \citep{cn}.
