\section{Real-time performance}
\label{sec:prediction_performance}

The primary constraint on real-time applications is time, especially when the predictions will be out of date once the next vehicle observations are available 30~seconds after the first. We recorded the timings of each component of our application during the simulation described in \cref{sec:prediction_model_comparison}. \Cref{tab:prediction_timing} presents the mean timing results for each component using both \emph{wall clock} (the time passed as recorded by a clock on the wall), as well as the \emph{CPU clock} (the processing time). The latter represents the overall computational complexity of the problem. Since computations are spread out over multiple cores (in this simulation we used 3)  the actual wall clock is up to 33\% faster in the vehicle update, network update, and \gls{eta} prediction steps (we discussed multithreading in \cref{sec:rt-implementation}). In some steps (such as while loading data), the wall clock time is longer than the CPU time: this is because the step involved downloading data from the server, during which time the processor is mostly inactive while it waits for the file.



<<prediction_timing,echo=FALSE,message=FALSE,warning=FALSE,cache=TRUE>>=
suppressPackageStartupMessages({
    library(tidyverse)
    library(knitr)
    library(kableExtra)
})
options(scipen = 10)

timings <- read_csv("data/timings.csv") %>% filter(iteration > 1)
bad_iter <- timings %>%
    filter(
        (what == "writing ETAs to protobuf feed" & wall > 5000) |
        (what == "updating vehicle states" & wall > 30000) |
        (what == "predicting ETAs" & wall > 25000)
    ) %>%
    pull(iteration)
# any bad iterations?
timings <- timings %>%
    filter(!iteration %in% bad_iter)
    # %>%
    #mutate(
    #    t_group = as.integer(timestamp) %/% 300 # every 5 minutes
    #) %>%
    #group_by(t_group, what) %>%
    #summarize(
    #    timestamp = median(timestamp),
    #    iteration = min(iteration),
    #    nvehicles = median(nvehicles),
    #    ntripupdates = median(ntripupdates),
    #    wall = median(wall),
    #    cpu = median(cpu)
    #) %>%
    #ungroup() %>%
    #select(-t_group)

tbl_times <- timings %>%
    group_by(what) %>%
    summarize(
        n = n(),
        wall_mean = mean(wall),
        wall_se = sd(wall) / sqrt(n),
        cpu_mean = mean(cpu),
        cpu_se = sd(cpu) / sqrt(n)
    ) %>%
    select(-n) %>%
    bind_rows(
    timings %>%
        group_by(iteration) %>%
        summarize(
            timestamp = first(timestamp),
            wall = sum(wall),
            cpu = sum(cpu)
        ) %>%
        ungroup() %>%
        summarize(
            what = "Total",
            n = n(),
            wall_mean = mean(wall),
            wall_se = sd(wall) / sqrt(n),
            cpu_mean = mean(cpu),
            cpu_se = sd(cpu) / sqrt(n)
        ) %>%
        select(-n)
    )



tbl_times <- tbl_times[c(1, 4, 5, 3, 2, 6, 7), ]
tbl_times <- tbl_times %>%
    mutate(
        wall_mean = format(signif(wall_mean, 3), drop0trailing = TRUE),
        wall_se = paste0("(", signif(wall_se, 2), ")"),
        cpu_mean = format(signif(cpu_mean, 3), drop0trailing = TRUE),
        cpu_se = paste0("(", signif(cpu_se, 2), ")")
    )
tbl_times$what <- c(
    "(L) Load data",
    "(U) Update vehicle information",
    "(V) Vehicle state update",
    "(N) Network state update",
    "(P) Predict ETAs",
    "(W) Write ETAs to protobuf feed",
    "(T) Total iteration time"
)
names(tbl_times) <- c("", "Wall clock", "(SE)", "CPU time", "(SE)")
kable(
    tbl_times,
    align = "lrlrl",
    booktabs = TRUE,
    caption = "Time taken, in milliseconds, during various parts of the program, running on a single core."
) %>%
    row_spec(6, extra_latex_after = "\\midrule") %>%
    kableExtra::kable_styling(font_size = 8)
@


From the results in \cref{tab:prediction_timing}, we see that the average iteration time is about 6~seconds, which is well below our original target of 30~seconds. The CPU time is about 14~seconds, so, on average, we see a 50\% reduction attributed to multithreading on three cores. The most computationally intensive step is the vehicle state update, which involves transitioning, reweighting, and occasionally resampling 5000~particles for each vehicle, which can exceed 1000 at peak time. Next is the arrival time prediction step, which also involves estimation with a subset of particles (in this simulation, we used 200). The last significant step is writing the \glspl{eta} to file, which additionally (in this case) involved computing the median arrival time for each vehicle and stop combination (\cref{app:particle-summaries}). The remaining steps each had average times of less than 0.1~seconds.



<<prediction_timing_time,warning=FALSE,echo=FALSE,cache=TRUE,dependson="prediction_timing",fig.width=8,fig.height=5,out.width="\\textwidth",fig.align="center",fig.cap="Number of vehicles and trip updates at different times ofthe day, along with the timing results over time for various stages of the program: (L) Load data, (O) Update vehicles information, (V) Vehicle state update, (N) Network state update, (P) Predict ETAs, (W) Write ETAs to protobuf feed, (T) Total iteration time.">>=
# totals:

total_time <- timings %>%
    group_by(timestamp) %>%
    summarize(
        wall = sum(wall),
        cpu = sum(cpu),
        what = "total",
        nvehicles = first(nvehicles),
        ntripupdates = first(ntripupdates)
    )

p0 <- timings %>%
    bind_rows(total_time) %>%
    arrange(timestamp) %>%
    mutate(
        timestamp = as.POSIXct(timestamp, origin = "1970-01-01"),
        Stage = factor(what,
            levels = sort(unique(what))[c(1, 5, 6, 4, 2, 7, 3)],
            labels = c("L", "U", "V", "N", "P", "W", "T")
        )
    ) %>%
    ggplot(aes(timestamp)) +
        theme_classic() +
        scale_x_datetime(
            "Time",
            labels = function(x) format(x, "%l%P")
        )

total_time <- total_time %>%
    mutate(timestamp = as.POSIXct(timestamp, origin = "1970-01-01"))

p1 <- p0 +
    geom_smooth(aes(y = nvehicles, colour = "Vehicle Positions"),
        data = total_time,
        se = FALSE,
        method = "loess",
        span = 0.05,
        n = 1001
    ) +
    geom_smooth(aes(y = ntripupdates, colour = "Trip Updates"),
        data = total_time,
        se = FALSE,
        method = "loess",
        span = 0.05,
        n = 1001
    ) +
    scale_y_continuous("Count",
        limits = c(0, 1200)
    ) +
    labs(colour = "")

p2 <- p0 +
    geom_smooth(
        aes(y = wall, colour = Stage, group = Stage),
        se = FALSE,
        method = "loess",
        span = 0.1
    ) +
    scale_y_continuous(
        "Iteration timing (ms, wall clock)"
    )

library(patchwork)

p1 / p2

@



Since the number of vehicles changes throughout the day, as displayed in the top half of \cref{fig:prediction_timing_time}, we also display the timings over time, as shown in the lower half of the figure. We see the two peak periods: morning peak, which includes both school and workers at the same time, and the broader evening peak since schools finish at about 3~pm while most workers finish about 5~pm. When the number of vehicles exceeds 1100, the total iteration time is around 9~seconds and remains at around 6~seconds during daytime off-peak. Again, this is the wall clock iteration time, so deployment on a server with more cores would result in even faster iterations.